/* tslint:disable */
/* eslint-disable */
/**
 * kotikota
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {Configuration} from "./configuration";
import type {AxiosInstance, AxiosPromise, AxiosRequestConfig} from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  assertParamExists,
  createRequestFunction,
  DUMMY_BASE_URL,
  serializeDataIfNeeded,
  setSearchParams,
  toPathString,
} from "./common";
import type {RequestArgs} from "./base";
// @ts-ignore
import {BASE_PATH, BaseAPI, operationServerMap,} from "./base";

/**
 *
 * @export
 * @interface AuthenticationPayload
 */
export interface AuthenticationPayload {
  /**
   *
   * @type {string}
   * @memberof AuthenticationPayload
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AuthenticationPayload
   */
  provider_id?: string;
}

/**
 *
 * @export
 * @interface BadRequestException
 */
export interface BadRequestException {
  /**
   *
   * @type {string}
   * @memberof BadRequestException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof BadRequestException
   */
  message?: string;
}

/**
 *
 * @export
 * @interface Exception
 */
export interface Exception {
  /**
   *
   * @type {string}
   * @memberof Exception
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Exception
   */
  message?: string;
}

/**
 *
 * @export
 * @interface FundsRaised
 */
export interface FundsRaised {
  /**
   *
   * @type {string}
   * @memberof FundsRaised
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof FundsRaised
   */
  post_id?: string;
  /**
   * sum of all transactions amount
   * @type {number}
   * @memberof FundsRaised
   */
  amount?: number;
  /**
   *
   * @type {Array<PaymentRequest>}
   * @memberof FundsRaised
   */
  transactions?: Array<PaymentRequest>;
}

/**
 *
 * @export
 * @interface InternalServerException
 */
export interface InternalServerException {
  /**
   *
   * @type {string}
   * @memberof InternalServerException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof InternalServerException
   */
  message?: string;
}

/**
 *
 * @export
 * @interface NotAuthorizedException
 */
export interface NotAuthorizedException {
  /**
   *
   * @type {string}
   * @memberof NotAuthorizedException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof NotAuthorizedException
   */
  message?: string;
}

/**
 *
 * @export
 * @interface PaymentRequest
 */
export interface PaymentRequest {
  /**
   *
   * @type {string}
   * @memberof PaymentRequest
   */
  id?: string;
  /**
   *
   * @type {number}
   * @memberof PaymentRequest
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentRequest
   */
  post_id?: string;
  /**
   *
   * @type {User}
   * @memberof PaymentRequest
   */
  from?: User;
  /**
   *
   * @type {User}
   * @memberof PaymentRequest
   */
  to?: User;
  /**
   *
   * @type {string}
   * @memberof PaymentRequest
   */
  label?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentRequest
   */
  reference?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentRequest
   */
  payment_type?: PaymentRequestPaymentTypeEnum;
  /**
   *
   * @type {string}
   * @memberof PaymentRequest
   */
  payment_method?: PaymentRequestPaymentMethodEnum;
}

export const PaymentRequestPaymentTypeEnum = {
  ACTION: "ACTION",
  DONATION: "DONATION",
} as const;

export type PaymentRequestPaymentTypeEnum =
  (typeof PaymentRequestPaymentTypeEnum)[keyof typeof PaymentRequestPaymentTypeEnum];
export const PaymentRequestPaymentMethodEnum = {
  MVOLA: "MVOLA",
  ORANGE_MONEY: "ORANGE_MONEY",
  AIRTEL_MONEY: "AIRTEL_MONEY",
  VISA: "VISA",
} as const;

export type PaymentRequestPaymentMethodEnum =
  (typeof PaymentRequestPaymentMethodEnum)[keyof typeof PaymentRequestPaymentMethodEnum];

/**
 *
 * @export
 * @interface Post
 */
export interface Post {
  /**
   *
   * @type {string}
   * @memberof Post
   */
  id?: string;
  /**
   *
   * @type {number}
   * @memberof Post
   */
  amount_required?: number;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  deadline?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  thumbnail?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  content?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  title?: string;
  /**
   *
   * @type {User}
   * @memberof Post
   */
  author?: User;
  /**
   *
   * @type {Date}
   * @memberof Post
   */
  creation_datetime?: Date;
  /**
   *
   * @type {Date}
   * @memberof Post
   */
  updated_at?: Date;
}

/**
 *
 * @export
 * @interface ResourceNotFoundException
 */
export interface ResourceNotFoundException {
  /**
   *
   * @type {string}
   * @memberof ResourceNotFoundException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof ResourceNotFoundException
   */
  message?: string;
}

/**
 *
 * @export
 * @interface SignUp
 */
export interface SignUp {
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  birth_date?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  photo?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  bio?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  about?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  sex?: SignUpSexEnum;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  provider_id?: string;
}

export const SignUpSexEnum = {
  M: "M",
  F: "F",
  OTHER: "OTHER",
} as const;

export type SignUpSexEnum = (typeof SignUpSexEnum)[keyof typeof SignUpSexEnum];

/**
 *
 * @export
 * @interface TooManyRequestsException
 */
export interface TooManyRequestsException {
  /**
   *
   * @type {string}
   * @memberof TooManyRequestsException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof TooManyRequestsException
   */
  message?: string;
}

/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  birth_date?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  photo?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  bio?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  about?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  sex?: UserSexEnum;
}

export const UserSexEnum = {
  M: "M",
  F: "F",
  OTHER: "OTHER",
} as const;

export type UserSexEnum = (typeof UserSexEnum)[keyof typeof UserSexEnum];

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/ping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ping(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ping(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["HealthApi.ping"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = HealthApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping(options?: any): AxiosPromise<string> {
      return localVarFp
        .ping(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthApi
   */
  public ping(options?: AxiosRequestConfig) {
    return HealthApiFp(this.configuration)
      .ping(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PayingApi - axios parameter creator
 * @export
 */
export const PayingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Initiate payments
     * @param {PaymentRequest} paymentRequest Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initiatePayment: async (
      paymentRequest: PaymentRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'paymentRequest' is not null or undefined
      assertParamExists("initiatePayment", "paymentRequest", paymentRequest);
      const localVarPath = `/transactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        paymentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PayingApi - functional programming interface
 * @export
 */
export const PayingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PayingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Initiate payments
     * @param {PaymentRequest} paymentRequest Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async initiatePayment(
      paymentRequest: PaymentRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentRequest>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.initiatePayment(
        paymentRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PayingApi.initiatePayment"]?.[
          localVarOperationServerIndex
          ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PayingApi - factory interface
 * @export
 */
export const PayingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PayingApiFp(configuration);
  return {
    /**
     *
     * @summary Initiate payments
     * @param {PaymentRequest} paymentRequest Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initiatePayment(
      paymentRequest: PaymentRequest,
      options?: any
    ): AxiosPromise<PaymentRequest> {
      return localVarFp
        .initiatePayment(paymentRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PayingApi - object-oriented interface
 * @export
 * @class PayingApi
 * @extends {BaseAPI}
 */
export class PayingApi extends BaseAPI {
  /**
   *
   * @summary Initiate payments
   * @param {PaymentRequest} paymentRequest Post to crupdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PayingApi
   */
  public initiatePayment(
    paymentRequest: PaymentRequest,
    options?: AxiosRequestConfig
  ) {
    return PayingApiFp(this.configuration)
      .initiatePayment(paymentRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PostingApi - axios parameter creator
 * @export
 */
export const PostingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Crupdate post by identifier.
     * @param {string} pid
     * @param {Post} post Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdatePostById: async (
      pid: string,
      post: Post,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("crupdatePostById", "pid", pid);
      // verify required parameter 'post' is not null or undefined
      assertParamExists("crupdatePostById", "post", post);
      const localVarPath = `/posts/{pid}`.replace(
        `{${"pid"}}`,
        encodeURIComponent(String(pid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        post,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete post by identifier.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostById: async (
      pid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("deletePostById", "pid", pid);
      const localVarPath = `/posts/{pid}`.replace(
        `{${"pid"}}`,
        encodeURIComponent(String(pid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get post\'s fund raised.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFundRaised: async (
      pid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("getFundRaised", "pid", pid);
      const localVarPath = `/posts/{pid}/fundsraised`.replace(
        `{${"pid"}}`,
        encodeURIComponent(String(pid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get post by identifier.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostById: async (
      pid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("getPostById", "pid", pid);
      const localVarPath = `/posts/{pid}`.replace(
        `{${"pid"}}`,
        encodeURIComponent(String(pid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all posts.
     * @param {number} page
     * @param {number} pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts: async (
      page: number,
      pageSize: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getPosts", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getPosts", "pageSize", pageSize);
      const localVarPath = `/posts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PostingApi - functional programming interface
 * @export
 */
export const PostingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PostingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Crupdate post by identifier.
     * @param {string} pid
     * @param {Post} post Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdatePostById(
      pid: string,
      post: Post,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.crupdatePostById(pid, post, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PostingApi.crupdatePostById"]?.[
          localVarOperationServerIndex
          ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete post by identifier.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePostById(
      pid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePostById(
        pid,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PostingApi.deletePostById"]?.[
          localVarOperationServerIndex
          ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get post\'s fund raised.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFundRaised(
      pid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundsRaised>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFundRaised(
        pid,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PostingApi.getFundRaised"]?.[
          localVarOperationServerIndex
          ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get post by identifier.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPostById(
      pid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPostById(
        pid,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PostingApi.getPostById"]?.[
          localVarOperationServerIndex
          ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get all posts.
     * @param {number} page
     * @param {number} pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPosts(
      page: number,
      pageSize: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(
        page,
        pageSize,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PostingApi.getPosts"]?.[
          localVarOperationServerIndex
          ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PostingApi - factory interface
 * @export
 */
export const PostingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PostingApiFp(configuration);
  return {
    /**
     *
     * @summary Crupdate post by identifier.
     * @param {string} pid
     * @param {Post} post Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdatePostById(
      pid: string,
      post: Post,
      options?: any
    ): AxiosPromise<Post> {
      return localVarFp
        .crupdatePostById(pid, post, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete post by identifier.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostById(pid: string, options?: any): AxiosPromise<Post> {
      return localVarFp
        .deletePostById(pid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get post\'s fund raised.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFundRaised(pid: string, options?: any): AxiosPromise<FundsRaised> {
      return localVarFp
        .getFundRaised(pid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get post by identifier.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostById(pid: string, options?: any): AxiosPromise<Post> {
      return localVarFp
        .getPostById(pid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all posts.
     * @param {number} page
     * @param {number} pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts(
      page: number,
      pageSize: number,
      options?: any
    ): AxiosPromise<Array<Post>> {
      return localVarFp
        .getPosts(page, pageSize, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PostingApi - object-oriented interface
 * @export
 * @class PostingApi
 * @extends {BaseAPI}
 */
export class PostingApi extends BaseAPI {
  /**
   *
   * @summary Crupdate post by identifier.
   * @param {string} pid
   * @param {Post} post Post to crupdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public crupdatePostById(
    pid: string,
    post: Post,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .crupdatePostById(pid, post, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete post by identifier.
   * @param {string} pid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public deletePostById(pid: string, options?: AxiosRequestConfig) {
    return PostingApiFp(this.configuration)
      .deletePostById(pid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get post\'s fund raised.
   * @param {string} pid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public getFundRaised(pid: string, options?: AxiosRequestConfig) {
    return PostingApiFp(this.configuration)
      .getFundRaised(pid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get post by identifier.
   * @param {string} pid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public getPostById(pid: string, options?: AxiosRequestConfig) {
    return PostingApiFp(this.configuration)
      .getPostById(pid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all posts.
   * @param {number} page
   * @param {number} pageSize
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public getPosts(
    page: number,
    pageSize: number,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .getPosts(page, pageSize, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Login user.
     * @param {AuthenticationPayload} authenticationPayload Login payload. set \&#39;user_id\&#39; to null when authenticating with email and password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIn: async (
      authenticationPayload: AuthenticationPayload,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authenticationPayload' is not null or undefined
      assertParamExists(
        "signIn",
        "authenticationPayload",
        authenticationPayload
      );
      const localVarPath = `/signin`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authenticationPayload,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sign up user
     * @param {SignUp} signUp Sign up payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp: async (
      signUp: SignUp,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'signUp' is not null or undefined
      assertParamExists("signUp", "signUp", signUp);
      const localVarPath = `/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signUp,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Login user.
     * @param {AuthenticationPayload} authenticationPayload Login payload. set \&#39;user_id\&#39; to null when authenticating with email and password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signIn(
      authenticationPayload: AuthenticationPayload,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(
        authenticationPayload,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SecurityApi.signIn"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Sign up user
     * @param {SignUp} signUp Sign up payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signUp(
      signUp: SignUp,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(
        signUp,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SecurityApi.signUp"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SecurityApiFp(configuration);
  return {
    /**
     *
     * @summary Login user.
     * @param {AuthenticationPayload} authenticationPayload Login payload. set \&#39;user_id\&#39; to null when authenticating with email and password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIn(
      authenticationPayload: AuthenticationPayload,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .signIn(authenticationPayload, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sign up user
     * @param {SignUp} signUp Sign up payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp(signUp: SignUp, options?: any): AxiosPromise<User> {
      return localVarFp
        .signUp(signUp, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI {
  /**
   *
   * @summary Login user.
   * @param {AuthenticationPayload} authenticationPayload Login payload. set \&#39;user_id\&#39; to null when authenticating with email and password
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public signIn(
    authenticationPayload: AuthenticationPayload,
    options?: AxiosRequestConfig
  ) {
    return SecurityApiFp(this.configuration)
      .signIn(authenticationPayload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Sign up user
   * @param {SignUp} signUp Sign up payload.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public signUp(signUp: SignUp, options?: AxiosRequestConfig) {
    return SecurityApiFp(this.configuration)
      .signUp(signUp, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Crupdate user by identifier.
     * @param {string} id
     * @param {User} user User to crupdate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateUserById: async (
      id: string,
      user: User,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("crupdateUserById", "id", id);
      // verify required parameter 'user' is not null or undefined
      assertParamExists("crupdateUserById", "user", user);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get user by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUserById", "id", id);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Crupdate user by identifier.
     * @param {string} id
     * @param {User} user User to crupdate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateUserById(
      id: string,
      user: User,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.crupdateUserById(id, user, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.crupdateUserById"]?.[
          localVarOperationServerIndex
          ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get user by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserById(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(
        id,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.getUserById"]?.[
          localVarOperationServerIndex
          ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @summary Crupdate user by identifier.
     * @param {string} id
     * @param {User} user User to crupdate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateUserById(
      id: string,
      user: User,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .crupdateUserById(id, user, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get user by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById(id: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .getUserById(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Crupdate user by identifier.
   * @param {string} id
   * @param {User} user User to crupdate.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public crupdateUserById(
    id: string,
    user: User,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .crupdateUserById(id, user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get user by identifier.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserById(id: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
